// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String    @db.String
  lastName      String    @db.String
  email         String?   @unique
  emailVerified DateTime?
  password      String?   @db.String
  image         String?
  role          Role      @default(user)
  createdAt     DateTime  @default(now()) @db.Timestamp
  updatedAt     DateTime  @updatedAt @db.Timestamp
  isBanned      Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  Booking       Booking[]
  Log           Log[]
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  email     String
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model MFAVerificationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  email     String
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model ResetPasswordToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  email     String
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model Floor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  floor     String   @unique
  image     String?
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  Desk      Desk[]
}

model Desk {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  floorId     String     @db.ObjectId
  name        String     @unique
  coordinates Int[]
  status      DeskStatus @default(available)
  createdAt   DateTime   @default(now()) @db.Timestamp
  updatedAt   DateTime   @updatedAt @db.Timestamp
  // disable desk at certain dates (to be implemented)

  Floor   Floor     @relation(fields: [floorId], references: [id], onDelete: Cascade)
  Booking Booking[]
}

model Booking {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  deskId    String        @db.ObjectId
  status    BookingStatus @default(waiting)
  startedAt DateTime      @db.Timestamp
  endedAt   DateTime      @db.Timestamp
  bookedAt  DateTime      @db.Timestamp
  updatedAt DateTime      @updatedAt @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  desk Desk @relation(fields: [deskId], references: [id], onDelete: Cascade)
}

model Log {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  activity  EventType
  message   String
  occuredAt DateTime  @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  superadmin
  admin // can manage reservations, assign managers, desks, floors, etc.
  manager // can manage reservations and desks
  user // limited
}

enum DeskStatus {
  available
  unavailable
}

enum BookingStatus {
  canceled // booking canceled
  waiting // waiting for reservation date or the user to check in
  checked_in // checked in
  checked_out // checked out
  no_show // abandoned
}

// Booking Date Status
// waiting (default), ongoing

enum EventType {
  registered // Authentication
  verified // Email Verification Request
  signed_in // Authentication
  signed_out // Authentication
  booked // Desk Reservation
  canceled // Desk Reservation
  checked_in // Desk Reservation
  promoted // User Promotion
  delete_user // User Deletion
  reset_password // User Mutation
  update_user // User Mutation
}
